
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package at.jku.ce.stockexchange.service;

import java.util.logging.Logger;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import at.jku.ce.brokerplatform.model.bl.BrokerPlatformService;
import at.jku.ce.brokerplatform.model.dal.DBExchangeTransaction;

/**
 * This class was generated by Apache CXF 2.3.7
 * 2013-12-08T16:00:29.751+01:00
 * Generated source version: 2.3.7
 * 
 */

@javax.jws.WebService(
                      serviceName = "ExchangeServiceService",
                      portName = "ExchangeServicePort",
                      targetNamespace = "http://service.stockexchange.ce.jku.at/",
                      wsdlLocation = "http://140.78.73.67:8080/CEStockExchangeWS/services/exchangeservice?wsdl",
                      endpointInterface = "at.jku.ce.stockexchange.service.ExchangeService")
                      
public class ExchangeServiceImpl implements ExchangeService {

    private static final Logger LOG = Logger.getLogger(ExchangeServiceImpl.class.getName());

    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#buyStock(java.lang.String  arg0 ,)int  arg1 )*
     */
    public at.jku.ce.stockexchange.service.Exchange buyStock(java.lang.String arg0,int arg1) { 
        LOG.info("Executing operation buyStock");
        System.out.println(arg0);
        System.out.println(arg1);
        //try{
        	BrokerPlatformService platform = BrokerPlatformService.getInstance();
            ObjectFactory factory;
        	factory = new ObjectFactory();
        	Exchange exchange = factory.createExchange();
        	exchange.setOrder(arg1);
        	exchange.setStockExchange(platform.getStockExchange());
        	
        	Stock stock = platform.getStockFromList(arg0);
        	if (stock == null){
        		exchange.setExecution(0);
        		exchange.setSale(false);
        		exchange.setStock(null);
        	}
        	else{
        		exchange.setStock(stock);
        		if(stock.getAvailability() == 0){
        			exchange.setExecution(0);
        			exchange.setSale(false);
        		}
        		else if(stock.getAvailability() >= arg1){
        			exchange.setExecution(arg1);
        			exchange.setSale(true);
        		}
        		else{
        			exchange.setExecution(stock.getAvailability());
        			exchange.setSale(true);
        		}
        		stock.setAvailability(stock.getAvailability() - exchange.getExecution());
            	
        		DBExchangeTransaction transaction = new DBExchangeTransaction();
            	transaction.insertEntry(exchange);
            	
        	}
        	return exchange;
        /*} catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        return null;*/
    }

    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#getExchanges(*
     */
    public java.util.List<at.jku.ce.stockexchange.service.Exchange> getExchanges() { 
        LOG.info("Executing operation getExchanges");
        try {
        	DBExchangeTransaction transaction = new DBExchangeTransaction();
        	return transaction.getEntries();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#sellStock(java.lang.String  arg0 ,)int  arg1 )*
     */
    public void sellStock(java.lang.String arg0,int arg1) { 
        LOG.info("Executing operation sellStock");
        System.out.println(arg0);
        System.out.println(arg1);
        try {
        	BrokerPlatformService platform = BrokerPlatformService.getInstance();
        	ObjectFactory factory = new ObjectFactory();
        	Stock stock = platform.getStockFromList(arg0);
        	if (stock != null && arg1 > 0){
        		stock.setAvailability(stock.getAvailability() + arg1);
        		Exchange exchange = factory.createExchange();
        		exchange.setSale(true);
        		exchange.setExecution(arg1);
        		exchange.setOrder(arg1);
        		exchange.setStock(stock);
        		exchange.setStockExchange(platform.getStockExchange());
        		
        		DBExchangeTransaction transaction = new DBExchangeTransaction();
            	transaction.insertEntry(exchange);
        	}
        	
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#getStock(java.lang.String  arg0 )*
     */
    public at.jku.ce.stockexchange.service.Stock getStock(java.lang.String arg0) { 
        LOG.info("Executing operation getStock");
        System.out.println(arg0);
        try {
        	BrokerPlatformService platform = BrokerPlatformService.getInstance();
        	return platform.getStockFromList(arg0);
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#getTradedStocks(*
     */
    public java.util.List<at.jku.ce.stockexchange.service.Stock> getTradedStocks() { 
        LOG.info("Executing operation getTradedStocks");
        try {
        	BrokerPlatformService platform = BrokerPlatformService.getInstance();
        	return platform.getStockList();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#reset(*
     */
    public void reset() { 
        LOG.info("Executing operation reset");
        try {
        	BrokerPlatformService platform = BrokerPlatformService.getInstance();
        	platform.registerDirectoryService();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
